{"version":3,"sources":["api/Index.js","components/submitForm/ValidationSchema.js","components/submitForm/SubmitForm.js","components/app/App.js","index.js"],"names":["axios","defaults","baseURL","getData","body","post","validationSchema","Yup","name","max","required","password","matches","passConfir","oneOf","email","site","url","age","typeError","min","skills","acceptTerms","initState","errorMailExists","successMessageServer","errorMessageServer","initialValues","SubmitForm","state","dataUser","onSubmit","values","a","skillsFilter","filter","skill","response","data","setState","isAxiosError","this","className","htmlFor","Item","id","placeholder","size","suffix","UserOutlined","Password","MailOutlined","LinkOutlined","rowKey","row","pagination","columns","title","key","render","text","record","i","StarOutlined","autoFocus","createNewRow","type","shouldUpdate","disabled","React","Component","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.055a132b.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3010';\r\n\r\nconst getData = (body) => axios.post('/sign-up', body);\r\n\r\nexport default getData;\r\n","import * as Yup from 'yup';\r\n\r\nconst validationSchema = Yup.object({\r\n  name: Yup.string()\r\n    .max(50, 'Имя должно содержать не более 50 символов')\r\n    .required('Пожалуйста, введите имя'),\r\n  password: Yup.string()\r\n    .matches(\r\n      /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=(.*[a-zA-Z]){4}).{8,20}$/,\r\n      'Введите от 8 до 40 символов, как минимум одна цифра и одна заглавная буква',\r\n    )\r\n    .required('Пожалуйста, введите пароль'),\r\n  passConfir: Yup.string()\r\n    .oneOf([Yup.ref('password'), null], 'Повторите пароль')\r\n    .required('Пароли не совподают'),\r\n  email: Yup.string().email('Неккоретный email').required('Пожалуйста, введите почту'),\r\n  site: Yup.string().url('Неверный адрес сайта'),\r\n  age: Yup.number('Must be an integer')\r\n    .typeError('Введите Ваш возраст')\r\n    .min(18, 'Ваш возраст должнен быть от 18 до 65 лет')\r\n    .max(65, 'Ваш возраст должнен быть от 18 до 65 лет')\r\n    .required('Сколько Вам лет?'),\r\n  skills: Yup.array(),\r\n  acceptTerms: Yup.bool().required('Required').oneOf([true], 'Нужно Ваше согласие'),\r\n});\r\n\r\nexport default validationSchema;\r\n","import React from 'react';\r\nimport { Formik } from 'formik';\r\nimport {\r\n  Form,\r\n  Input,\r\n  InputNumber,\r\n  Table,\r\n  AddRowButton,\r\n  Checkbox,\r\n  SubmitButton,\r\n  ResetButton,\r\n} from 'formik-antd';\r\nimport {\r\n  MailOutlined, UserOutlined, LinkOutlined, StarOutlined,\r\n} from '@ant-design/icons';\r\n\r\nimport getData from '../../api/Index';\r\nimport './SubmitForm.scss';\r\n\r\nimport validationSchema from './ValidationSchema';\r\n\r\nconst initState = {\r\n  errorMailExists: null,\r\n  successMessageServer: null,\r\n  errorMessageServer: null,\r\n};\r\n\r\n/* поля, которые отправляются на сервер */\r\nconst initialValues = {\r\n  name: '',\r\n  password: '',\r\n  passConfir: '',\r\n  email: '',\r\n  site: '',\r\n  age: null,\r\n  skills: [''],\r\n  acceptTerms: false,\r\n};\r\n\r\nclass SubmitForm extends React.Component {\r\n  state = initState;\r\n\r\n  dataUser = initialValues;\r\n\r\n  onSubmit = async (values) => {\r\n    const skillsFilter = values.skills.filter((skill) => skill !== ''); // можно просто Boolean :)\r\n\r\n    const body = {\r\n      ...values,\r\n      skills: skillsFilter,\r\n    };\r\n\r\n    try {\r\n      /* объект с данными */\r\n      const response = await getData(body);\r\n      const { data } = response;\r\n      this.setState({\r\n        errorMailExists: null, // если почта такой нет, то ошибку не выдаем\r\n        errorMessageServer: null, // убираем соощение об ошибке сервера\r\n        successMessageServer: data, // выдаем сообщение об успехе\r\n      });\r\n    } catch (error) {\r\n      if (error.isAxiosError) {\r\n        this.setState({\r\n          errorMessageServer: 'Сервер не отвечает',\r\n          successMessageServer: null, // убираем сообщение об успешной регистрации\r\n        });\r\n      }\r\n      this.setState({\r\n        // выдаем пользователю, что такая почта уже есть\r\n        errorMailExists: error.response.data,\r\n        successMessageServer: null, // убираем сообщение о успешной регистрации\r\n        errorMessageServer: null, // и сообщение, что сервер не отвечает\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { errorMailExists, successMessageServer, errorMessageServer } = this.state;\r\n    return (\r\n      <Formik\r\n        onSubmit={this.onSubmit}\r\n        initialValues={this.dataUser}\r\n        validationSchema={validationSchema}\r\n      >\r\n        <Form className=\"form\">\r\n          <div>\r\n            <label htmlFor=\"name\">\r\n              Имя\r\n              <span className=\"required-star\"> *</span>\r\n            </label>\r\n            <Form.Item name=\"name\">\r\n              <Input\r\n                id=\"name\"\r\n                name=\"name\"\r\n                placeholder=\"Алексей\"\r\n                size=\"large\"\r\n                suffix={<UserOutlined />}\r\n              />\r\n            </Form.Item>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"password\">\r\n              Пароль\r\n              <span className=\"required-star\"> *</span>\r\n            </label>\r\n            <Form.Item name=\"password\">\r\n              <Input.Password\r\n                id=\"password\"\r\n                name=\"password\"\r\n                placeholder=\"My-password-123\"\r\n                size=\"large\"\r\n              />\r\n            </Form.Item>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"passConfir\">\r\n              Повторите пароль\r\n              <span className=\"required-star\"> *</span>\r\n            </label>\r\n            <Form.Item name=\"passConfir\">\r\n              <Input.Password\r\n                id=\"passConfir\"\r\n                name=\"passConfir\"\r\n                placeholder=\"My-password-123\"\r\n                size=\"large\"\r\n              />\r\n            </Form.Item>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"email\">\r\n              Почта\r\n              <span className=\"required-star\"> *</span>\r\n            </label>\r\n            <span className=\"errorEmail\">{errorMailExists}</span>\r\n            <Form.Item name=\"email\">\r\n              <Input\r\n                id=\"email\"\r\n                name=\"email\"\r\n                placeholder=\"my@mail.ru\"\r\n                size=\"large\"\r\n                suffix={<MailOutlined />}\r\n              />\r\n            </Form.Item>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"site\">Ваш сайт</label>\r\n            <Form.Item name=\"site\">\r\n              <Input\r\n                id=\"site\"\r\n                name=\"site\"\r\n                placeholder=\"http://www.my-site.ru\"\r\n                size=\"large\"\r\n                suffix={<LinkOutlined />}\r\n              />\r\n            </Form.Item>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"age\">\r\n              Возраст\r\n              <span className=\"required-star\"> *</span>\r\n            </label>\r\n            <Form.Item name=\"age\">\r\n              <InputNumber id=\"age\" name=\"age\" placeholder=\"27\" size=\"large\" />\r\n            </Form.Item>\r\n          </div>\r\n          <div>\r\n            <Table\r\n              name=\"skills\"\r\n              rowKey={(row) => `${row.id}`}\r\n              size=\"small\"\r\n              pagination={false}\r\n              columns={[\r\n                {\r\n                  title: 'Skills',\r\n                  key: 'name',\r\n                  render: (text, record, i) => (\r\n                    <Input\r\n                      name={`skills[${i}]`}\r\n                      placeholder=\"Умею вкусно поесть\"\r\n                      size=\"large\"\r\n                      suffix={<StarOutlined />}\r\n                      autoFocus\r\n                    />\r\n                  ),\r\n                },\r\n              ]}\r\n            />\r\n            <AddRowButton\r\n              name=\"skills\"\r\n              createNewRow={(text) => text || ''}\r\n              size=\"large\"\r\n              type=\"primary\"\r\n              className=\"skillsButton\"\r\n              id=\"addSkill\"\r\n            >\r\n              Добавить skill\r\n            </AddRowButton>\r\n          </div>\r\n          <div>\r\n            <Form.Item name=\"acceptTerms\" shouldUpdate={false}>\r\n              <Checkbox id=\"acceptTerms\" name=\"acceptTerms\" />\r\n              <label htmlFor=\"acceptTerms\">\r\n                <span> Согласен с условиями</span>\r\n                <span className=\"required-star\"> *</span>\r\n              </label>\r\n            </Form.Item>\r\n          </div>\r\n          <div className=\"formButtonsContainer\">\r\n            <SubmitButton disabled={false} size=\"large\" className=\"button\">\r\n              Зарегистрироваться\r\n            </SubmitButton>\r\n            <ResetButton size=\"large\" className=\"button\">\r\n              Очистить форму\r\n            </ResetButton>\r\n          </div>\r\n          <span className=\"success\">{successMessageServer}</span>\r\n          <span className=\"error\">{errorMessageServer}</span>\r\n        </Form>\r\n      </Formik>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmitForm;\r\n","import React from 'react';\r\nimport SubmitForm from '../submitForm/SubmitForm';\r\n\r\nimport './App.scss';\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <h2 className=\"header\">Форма регистрации 2</h2>\r\n    <SubmitForm />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport './index.scss';\r\nimport App from './components/app/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}